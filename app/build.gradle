apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
    compileSdk rootProject.ext.compileSdkVersion as Integer
    buildToolsVersion = rootProject.ext.buildToolsVersion as String

    //noinspection GroovyAssignabilityCheck
    signingConfigs {
        myConfig

        debug {
            storeFile file("../debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    defaultConfig {
        applicationId "jp.takke.datastats"
        targetSdkVersion rootProject.ext.targetSdkVersion as Integer
        minSdkVersion rootProject.ext.minSdkVersion as Integer
        versionCode rootProject.ext.versionCode as Integer
        versionName rootProject.ext.versionName as String

        // Rename APK/AAB filename
        def shortVersionName = versionName.replaceAll('\\.', '')
        //noinspection UnnecessaryQualifiedReference
        def d = new java.text.SimpleDateFormat("yyyyMMdd_HHmm").format(new Date())
        base.archivesName = "${apkNamePrefix}_${shortVersionName}_${d}"
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.myConfig
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix 'd'
            minifyEnabled false
        }
    }

    // publish task
    def publish = project.tasks.create("publishAll")
    android.applicationVariants.all { variant ->

        if (variant.buildType.name == "release") {

            variant.outputs.each { output ->
                if (output.outputFileName.endsWith('.apk')) {

                    // publishXxxApk
                    def task = project.tasks.create("publish${variant.name.capitalize()}Apk", Copy)

                    def srcDir = variant.packageApplicationProvider.get().outputDirectory.getAsFile().get()
                    def srcPath = new File(srcDir, output.outputFileName)
                    task.from(srcPath)
                    task.into(deployTo)
                    task.dependsOn variant.assembleProvider.get()
                    publish.dependsOn task

                    // copyXxxMappingTxt
//                    if (variant.buildType.minifyEnabled) {
//                        def copyTask = project.tasks.create("copy${variant.name.capitalize()}MappingTxt", Copy)
//
//                        // variant.outputFile = "build/outputs/apk/xxx.apk"
//                        // from: "build/outputs/proguard/free/release/mapping.txt"
//                        // into: "proguard-outputs/free-release-mapping.txt"
//
//                        def flavorName = ""
//                        def buildTypeName = variant.buildType.name
//
//                        copyTask.from(variant.getMappingFile())
//                        copyTask.rename('(.*)', "${flavorName}-proguard-\$1")
//                        copyTask.into(srcPath.parent + "/../../../proguard-outputs")
//
//                        System.println("* copy mapping txt : [${flavorName}][${buildTypeName}]")
//
//                        copyTask.dependsOn variant.assembleProvider.get()
//                        task.dependsOn copyTask
//                    }
                }
            }
        }
    }

    // bundlePublishXxxRelease task
    android.applicationVariants.all { variant ->

        if (variant.buildType.name == "release") {
            def buildTypeName = variant.buildType.name
            def task = project.tasks.create("bundlePublish${variant.name.capitalize()}", Copy)

            def aabFilename = "${base.archivesName.get()}-${buildTypeName}.aab"
            def path = "${layout.buildDirectory.get()}/outputs/bundle/${variant.name}/${aabFilename}"
            System.out.println("${task.name}: ${path} -> ${deployTo}")
//            System.println("*** aab path = $path ($task) [$buildTypeName]")

            task.from(path)
            task.into(deployTo)
            task.dependsOn bundleRelease
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        aidl true
        buildConfig true
    }
    namespace 'jp.takke.datastats'

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation libs.androidx.appcompat
    implementation libs.androidx.core.ktx
    implementation libs.androidx.preference.ktx

    implementation libs.kotlin.stdlib.jdk7
}

// load signing settings from gradle.properties
if (project.hasProperty('storeFile')) {
    android.signingConfigs.myConfig.storeFile = file(storeFile)
    android.signingConfigs.myConfig.storePassword = storePassword
    android.signingConfigs.myConfig.keyAlias = keyAlias
    android.signingConfigs.myConfig.keyPassword = keyPassword
}