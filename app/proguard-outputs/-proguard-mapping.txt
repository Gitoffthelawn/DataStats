jp.takke.datastats.LayerService -> jp.takke.datastats.LayerService:
    android.view.View view -> a
    android.view.WindowManager wm -> b
    boolean mAttached -> c
    int mXPos -> d
    int mIntervalMs -> e
    boolean mSleeping -> f
    boolean mServiceAlive -> g
    long mLastRxBytes -> h
    long mLastTxBytes -> i
    long mDiffRxBytes -> j
    long mDiffTxBytes -> k
    long mLastTime -> l
    long mElapsedMs -> m
    boolean mSnapshot -> n
    boolean mSnapshotFirstTime -> o
    long mSnapshotRxKb -> p
    long mSnapshotRxKbD1 -> q
    long mSnapshotTxKb -> r
    long mSnapshotTxKbD1 -> s
    android.content.BroadcastReceiver mReceiver -> t
    void onCreate() -> onCreate
    void loadPreferences() -> a
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    void execTask() -> b
    void showTraffic() -> c
    int getTextShadowColorByKb(long) -> a
    int getTextColorByKb(long) -> b
    void gatherTraffic() -> d
    void scheduleNextTime(int) -> a
    void stopAlarm() -> e
    void onDestroy() -> onDestroy
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onViewAttachedToWindow(android.view.View) -> onViewAttachedToWindow
    void onViewDetachedFromWindow(android.view.View) -> onViewDetachedFromWindow
    boolean access$002(jp.takke.datastats.LayerService,boolean) -> a
    int access$100(jp.takke.datastats.LayerService) -> a
    void access$200(jp.takke.datastats.LayerService,int) -> a
    void access$300(jp.takke.datastats.LayerService) -> b
jp.takke.datastats.LayerService$1 -> jp.takke.datastats.a:
    jp.takke.datastats.LayerService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
jp.takke.datastats.MainActivity -> jp.takke.datastats.MainActivity:
    boolean mPreparingConfigArea -> a
    void onCreate(android.os.Bundle) -> onCreate
    void prepareStartStopButton() -> a
    void prepareConfigArea() -> b
    void preparePreviewArea() -> c
    void restartWithPreview(long,long) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean access$000(jp.takke.datastats.MainActivity) -> a
    void access$100(jp.takke.datastats.MainActivity,long,long) -> a
jp.takke.datastats.MainActivity$1 -> jp.takke.datastats.b:
    jp.takke.datastats.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
jp.takke.datastats.MainActivity$2 -> jp.takke.datastats.c:
    jp.takke.datastats.MainActivity this$0 -> a
    void run() -> run
jp.takke.datastats.MainActivity$3 -> jp.takke.datastats.d:
    jp.takke.datastats.MainActivity this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
jp.takke.datastats.MainActivity$4 -> jp.takke.datastats.e:
    int[] val$intervals -> a
    jp.takke.datastats.MainActivity this$0 -> b
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
jp.takke.datastats.MainActivity$5 -> jp.takke.datastats.f:
    jp.takke.datastats.MainActivity this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
jp.takke.datastats.MainActivity$6 -> jp.takke.datastats.g:
    jp.takke.datastats.MainActivity this$0 -> a
    void onClick(android.view.View) -> onClick
jp.takke.datastats.MainActivity$7 -> jp.takke.datastats.h:
    int val$kb -> a
    jp.takke.datastats.MainActivity this$0 -> b
    void onClick(android.view.View) -> onClick
jp.takke.util.MyLog -> jp.takke.a.a:
    void d(java.lang.String) -> a
    void dumpToExternalLogFile(int,java.lang.String) -> a
jp.takke.util.TkConfig -> jp.takke.a.b:
    boolean debugMode -> a
jp.takke.util.TkUtil -> jp.takke.a.c:
    boolean isEmulatorChecked -> a
    boolean isEmulatorCache -> b
    boolean isEmulator() -> a
